"""Generated message classes for genomics version v1beta2.

Provides access to Genomics data.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from protorpc import messages

from googlecloudapis.apitools.base.py import encoding


package = 'genomics'


class Beacon(messages.Message):
  """A beacon represents whether any variant call in a variant set has a
  specific allele at a particular position.

  Fields:
    exists: True if the allele exists on any variant call, false otherwise.
  """

  exists = messages.BooleanField(1)


class Call(messages.Message):
  """A Call represents the determination of genotype with respect to a
  particular variant. It may include associated information such as quality
  and phasing. For example, a Call might assign a probability of 0.32 to the
  occurrence of a SNP named rs1234 in a call set with the name NA12345.

  Messages:
    InfoValue: A map of additional variant call information.

  Fields:
    callSetId: The ID of the call set this variant call belongs to.
    callSetName: The name of the call set this variant call belongs to.
    genotype: The genotype of this variant call. Each value represents either
      the value of the referenceBases field or a 1-based index into
      alternateBases. If a variant had a referenceBases value of T and an
      alternateBases value of ["A", "C"], and the genotype was [2, 1], that
      would mean the call represented the heterozygous value CA for this
      variant. If the genotype was instead [0, 1], the represented value would
      be TA. Ordering of the genotype values is important if the phaseset is
      present. If a genotype is not called (that is, a . is present in the GT
      string) -1 is returned.
    genotypeLikelihood: The genotype likelihoods for this variant call. Each
      array entry represents how likely a specific genotype is for this call.
      The value ordering is defined by the GL tag in the VCF spec.
    info: A map of additional variant call information.
    phaseset: If this field is present, this variant call's genotype ordering
      implies the phase of the bases and is consistent with any other variant
      calls in the same reference sequence which have the same phaseset value.
      When importing data from VCF, if the genotype data was phased but no
      phase set was specified this field will be set to *.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """A map of additional variant call information.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  callSetId = messages.StringField(1)
  callSetName = messages.StringField(2)
  genotype = messages.IntegerField(3, repeated=True, variant=messages.Variant.INT32)
  genotypeLikelihood = messages.FloatField(4, repeated=True)
  info = messages.MessageField('InfoValue', 5)
  phaseset = messages.StringField(6)


class CallSet(messages.Message):
  """A CallSet is a collection of variant calls. It belongs to a variant set.

  Messages:
    InfoValue: A map of additional callset information.

  Fields:
    created: The date this call set was created in milliseconds from the
      epoch.
    id: The Google generated ID of the call set, immutable.
    info: A map of additional callset information.
    name: The callset name.
    sampleId: The sample ID this call set corresponds to.
    variantSetIds: The IDs of the variant sets this call set belongs to.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """A map of additional callset information.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  created = messages.IntegerField(1)
  id = messages.StringField(2)
  info = messages.MessageField('InfoValue', 3)
  name = messages.StringField(4)
  sampleId = messages.StringField(5)
  variantSetIds = messages.StringField(6, repeated=True)


class CigarUnit(messages.Message):
  """A single CIGAR operation.

  Enums:
    OperationValueValuesEnum:

  Fields:
    operation: A OperationValueValuesEnum attribute.
    operationLength: The number of bases that the operation runs for.
      Required.
    referenceSequence: `referenceSequence` is only used at mismatches
      (`SEQUENCE_MISMATCH`) and deletions (`DELETE`). Filling this field
      replaces SAM's MD tag. If the relevant information is not available,
      leave this field as `null`.
  """

  class OperationValueValuesEnum(messages.Enum):
    """OperationValueValuesEnum enum type.

    Values:
      ALIGNMENT_MATCH: <no description>
      CLIP_HARD: <no description>
      CLIP_SOFT: <no description>
      DELETE: <no description>
      INSERT: <no description>
      PAD: <no description>
      SEQUENCE_MATCH: <no description>
      SEQUENCE_MISMATCH: <no description>
      SKIP: <no description>
    """
    ALIGNMENT_MATCH = 0
    CLIP_HARD = 1
    CLIP_SOFT = 2
    DELETE = 3
    INSERT = 4
    PAD = 5
    SEQUENCE_MATCH = 6
    SEQUENCE_MISMATCH = 7
    SKIP = 8

  operation = messages.EnumField('OperationValueValuesEnum', 1)
  operationLength = messages.IntegerField(2, variant=messages.Variant.UINT64)
  referenceSequence = messages.StringField(3)


class CoverageBucket(messages.Message):
  """A bucket over which read coverage has been precomputed. A bucket
  corresponds to a specific range of the reference sequence.

  Fields:
    meanCoverage: The average number of reads which are aligned to each
      individual reference base in this bucket.
    range: The genomic coordinate range spanned by this bucket.
  """

  meanCoverage = messages.FloatField(1, variant=messages.Variant.FLOAT)
  range = messages.MessageField('Range', 2)


class Dataset(messages.Message):
  """A Dataset is a collection of genomic data.

  Fields:
    id: The Google generated ID of the dataset, immutable.
    isPublic: Flag indicating whether or not a dataset is publicly viewable.
      If a dataset is not public, it inherits viewing permissions from its
      project.
    name: The dataset name.
    projectNumber: The Google Developers Console project number that this
      dataset belongs to.
  """

  id = messages.StringField(1)
  isPublic = messages.BooleanField(2)
  name = messages.StringField(3)
  projectNumber = messages.IntegerField(4)


class ExperimentalCreateJobRequest(messages.Message):
  """The job creation request.

  Fields:
    align: Specifies whether or not to run the alignment pipeline. At least
      one of align or callVariants must be provided.
    callVariants: Specifies whether or not to run the variant calling
      pipeline. If specified, alignment will be performed first and the
      aligned BAMs will passed as input to the variant caller. At least one of
      align or callVariants must be provided.
    gcsOutputPath: Specifies where to copy the results of certain pipelines.
      This should be in the form of gs://bucket/path.
    pairedSourceUris: A list of Google Cloud Storage URIs of paired end .fastq
      files to operate upon. If specified, this represents the second file of
      each paired .fastq file. The first file of each pair should be specified
      in sourceUris.
    projectNumber: Required. The Google Cloud Project ID with which to
      associate the request.
    sourceUris: A list of Google Cloud Storage URIs of data files to operate
      upon. These can be .bam, interleaved .fastq, or paired .fastq. If
      specifying paired .fastq files, the first of each pair of files should
      be listed here, and the second of each pair should be listed in
      pairedSourceUris.
  """

  align = messages.BooleanField(1)
  callVariants = messages.BooleanField(2)
  gcsOutputPath = messages.StringField(3)
  pairedSourceUris = messages.StringField(4, repeated=True)
  projectNumber = messages.IntegerField(5)
  sourceUris = messages.StringField(6, repeated=True)


class ExperimentalCreateJobResponse(messages.Message):
  """The job creation response.

  Fields:
    jobId: A job ID that can be used to get status information.
  """

  jobId = messages.StringField(1)


class ExportReadGroupSetsRequest(messages.Message):
  """The ReadGroupSet export request.

  Fields:
    exportUri: A Google Cloud Storage URI where the exported BAM file will be
      created. The currently authenticated user must have write access to the
      new file location. An error will be returned if the URI already contains
      data.
    projectNumber: The Google Developers Console project number that owns this
      export.
    readGroupSetIds: The IDs of the read group sets to export.
    referenceNames: The reference names to export. If this is not specified,
      all reference sequences, including unmapped reads, are exported. Use *
      to export only unmapped reads.
  """

  exportUri = messages.StringField(1)
  projectNumber = messages.IntegerField(2)
  readGroupSetIds = messages.StringField(3, repeated=True)
  referenceNames = messages.StringField(4, repeated=True)


class ExportReadGroupSetsResponse(messages.Message):
  """The ReadGroupSet export response.

  Fields:
    jobId: A job ID that can be used to get status information.
  """

  jobId = messages.StringField(1)


class ExportVariantsRequest(messages.Message):
  """The variant data export request.

  Enums:
    FormatValueValuesEnum: The format for the exported data.

  Fields:
    bigqueryDataset: The BigQuery dataset to export data to. Note that this is
      distinct from the Genomics concept of "dataset".
    bigqueryTable: The BigQuery table to export data to. If the table doesn't
      exist, it will be created. If it already exists, it will be overwritten.
    callSetIds: If provided, only variant call information from the specified
      call sets will be exported. By default all variant calls are exported.
    format: The format for the exported data.
    projectNumber: The Google Cloud project number that owns the destination
      BigQuery dataset. The caller must have WRITE access to this project.
      This project will also own the resulting export job.
    variantSetId: Required. The ID of the variant set that contains variant
      data which should be exported. The caller must have READ access to this
      variant set.
  """

  class FormatValueValuesEnum(messages.Enum):
    """The format for the exported data.

    Values:
      BIGQUERY: <no description>
    """
    BIGQUERY = 0

  bigqueryDataset = messages.StringField(1)
  bigqueryTable = messages.StringField(2)
  callSetIds = messages.StringField(3, repeated=True)
  format = messages.EnumField('FormatValueValuesEnum', 4)
  projectNumber = messages.IntegerField(5)
  variantSetId = messages.StringField(6)


class ExportVariantsResponse(messages.Message):
  """The variant data export response.

  Fields:
    jobId: A job ID that can be used to get status information.
  """

  jobId = messages.StringField(1)


class GenomicsBeaconsGetRequest(messages.Message):
  """A GenomicsBeaconsGetRequest object.

  Fields:
    allele: Required. The allele to look for ('A', 'C', 'G' or 'T').
    position: Required. The 0-based position to query.
    referenceName: Required. The reference to query over.
    variantSetId: The ID of the variant set to query over. It must be public.
      Private variant sets will return an unauthorized exception.
  """

  allele = messages.StringField(1)
  position = messages.IntegerField(2)
  referenceName = messages.StringField(3)
  variantSetId = messages.StringField(4, required=True)


class GenomicsCallsetsDeleteRequest(messages.Message):
  """A GenomicsCallsetsDeleteRequest object.

  Fields:
    callSetId: The ID of the callset to be deleted.
  """

  callSetId = messages.StringField(1, required=True)


class GenomicsCallsetsDeleteResponse(messages.Message):
  """An empty GenomicsCallsetsDelete response."""


class GenomicsCallsetsGetRequest(messages.Message):
  """A GenomicsCallsetsGetRequest object.

  Fields:
    callSetId: The ID of the callset.
  """

  callSetId = messages.StringField(1, required=True)


class GenomicsCallsetsPatchRequest(messages.Message):
  """A GenomicsCallsetsPatchRequest object.

  Fields:
    callSet: A CallSet resource to be passed as the request body.
    callSetId: The ID of the callset to be updated.
  """

  callSet = messages.MessageField('CallSet', 1)
  callSetId = messages.StringField(2, required=True)


class GenomicsCallsetsUpdateRequest(messages.Message):
  """A GenomicsCallsetsUpdateRequest object.

  Fields:
    callSet: A CallSet resource to be passed as the request body.
    callSetId: The ID of the callset to be updated.
  """

  callSet = messages.MessageField('CallSet', 1)
  callSetId = messages.StringField(2, required=True)


class GenomicsDatasetsDeleteRequest(messages.Message):
  """A GenomicsDatasetsDeleteRequest object.

  Fields:
    datasetId: The ID of the dataset to be deleted.
  """

  datasetId = messages.StringField(1, required=True)


class GenomicsDatasetsDeleteResponse(messages.Message):
  """An empty GenomicsDatasetsDelete response."""


class GenomicsDatasetsGetRequest(messages.Message):
  """A GenomicsDatasetsGetRequest object.

  Fields:
    datasetId: The ID of the dataset.
  """

  datasetId = messages.StringField(1, required=True)


class GenomicsDatasetsListRequest(messages.Message):
  """A GenomicsDatasetsListRequest object.

  Fields:
    pageSize: The maximum number of results returned by this request.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    projectNumber: Only return datasets which belong to this Google Developers
      Console project.
  """

  pageSize = messages.IntegerField(1, variant=messages.Variant.INT32, default=50)
  pageToken = messages.StringField(2)
  projectNumber = messages.IntegerField(3)


class GenomicsDatasetsPatchRequest(messages.Message):
  """A GenomicsDatasetsPatchRequest object.

  Fields:
    dataset: A Dataset resource to be passed as the request body.
    datasetId: The ID of the dataset to be updated.
  """

  dataset = messages.MessageField('Dataset', 1)
  datasetId = messages.StringField(2, required=True)


class GenomicsDatasetsUndeleteRequest(messages.Message):
  """A GenomicsDatasetsUndeleteRequest object.

  Fields:
    datasetId: The ID of the dataset to be undeleted.
  """

  datasetId = messages.StringField(1, required=True)


class GenomicsDatasetsUpdateRequest(messages.Message):
  """A GenomicsDatasetsUpdateRequest object.

  Fields:
    dataset: A Dataset resource to be passed as the request body.
    datasetId: The ID of the dataset to be updated.
  """

  dataset = messages.MessageField('Dataset', 1)
  datasetId = messages.StringField(2, required=True)


class GenomicsJobsCancelRequest(messages.Message):
  """A GenomicsJobsCancelRequest object.

  Fields:
    jobId: Required. The ID of the job.
  """

  jobId = messages.StringField(1, required=True)


class GenomicsJobsCancelResponse(messages.Message):
  """An empty GenomicsJobsCancel response."""


class GenomicsJobsGetRequest(messages.Message):
  """A GenomicsJobsGetRequest object.

  Fields:
    jobId: Required. The ID of the job.
  """

  jobId = messages.StringField(1, required=True)


class GenomicsReadgroupsetsCoveragebucketsListRequest(messages.Message):
  """A GenomicsReadgroupsetsCoveragebucketsListRequest object.

  Fields:
    pageSize: The maximum number of results to return in a single page. If
      unspecified, defaults to 1024. The maximum value is 2048.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    range_end: The end position of the range on the reference, 0-based
      exclusive. If specified, referenceName must also be specified.
    range_referenceName: The reference sequence name, for example "chr1", "1",
      or "chrX".
    range_start: The start position of the range on the reference, 0-based
      inclusive. If specified, referenceName must also be specified.
    readGroupSetId: Required. The ID of the read group set over which coverage
      is requested.
    targetBucketWidth: The desired width of each reported coverage bucket in
      base pairs. This will be rounded down to the nearest precomputed bucket
      width; the value of which is returned as bucketWidth in the response.
      Defaults to infinity (each bucket spans an entire reference sequence) or
      the length of the target range, if specified. The smallest precomputed
      bucketWidth is currently 2048 base pairs; this is subject to change.
  """

  pageSize = messages.IntegerField(1, variant=messages.Variant.INT32, default=1024)
  pageToken = messages.StringField(2)
  range_end = messages.IntegerField(3, variant=messages.Variant.UINT64)
  range_referenceName = messages.StringField(4)
  range_start = messages.IntegerField(5, variant=messages.Variant.UINT64)
  readGroupSetId = messages.StringField(6, required=True)
  targetBucketWidth = messages.IntegerField(7, variant=messages.Variant.UINT64)


class GenomicsReadgroupsetsDeleteRequest(messages.Message):
  """A GenomicsReadgroupsetsDeleteRequest object.

  Fields:
    readGroupSetId: The ID of the read group set to be deleted. The caller
      must have WRITE permissions to the dataset associated with this read
      group set.
  """

  readGroupSetId = messages.StringField(1, required=True)


class GenomicsReadgroupsetsDeleteResponse(messages.Message):
  """An empty GenomicsReadgroupsetsDelete response."""


class GenomicsReadgroupsetsGetRequest(messages.Message):
  """A GenomicsReadgroupsetsGetRequest object.

  Fields:
    readGroupSetId: The ID of the read group set.
  """

  readGroupSetId = messages.StringField(1, required=True)


class GenomicsReadgroupsetsPatchRequest(messages.Message):
  """A GenomicsReadgroupsetsPatchRequest object.

  Fields:
    readGroupSet: A ReadGroupSet resource to be passed as the request body.
    readGroupSetId: The ID of the read group set to be updated. The caller
      must have WRITE permissions to the dataset associated with this read
      group set.
  """

  readGroupSet = messages.MessageField('ReadGroupSet', 1)
  readGroupSetId = messages.StringField(2, required=True)


class GenomicsReadgroupsetsUpdateRequest(messages.Message):
  """A GenomicsReadgroupsetsUpdateRequest object.

  Fields:
    readGroupSet: A ReadGroupSet resource to be passed as the request body.
    readGroupSetId: The ID of the read group set to be updated. The caller
      must have WRITE permissions to the dataset associated with this read
      group set.
  """

  readGroupSet = messages.MessageField('ReadGroupSet', 1)
  readGroupSetId = messages.StringField(2, required=True)


class GenomicsReferencesBasesListRequest(messages.Message):
  """A GenomicsReferencesBasesListRequest object.

  Fields:
    end: The end position (0-based, exclusive) of this query. Defaults to the
      length length of this reference.
    pageSize: Specifies the maximum number of bases to return in a single
      page.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    referenceId: The ID of the reference.
    start: The start position (0-based) of this query. Defaults to 0.
  """

  end = messages.IntegerField(1, variant=messages.Variant.UINT64)
  pageSize = messages.IntegerField(2, variant=messages.Variant.INT32, default=200000)
  pageToken = messages.StringField(3)
  referenceId = messages.StringField(4, required=True)
  start = messages.IntegerField(5, variant=messages.Variant.UINT64)


class GenomicsReferencesGetRequest(messages.Message):
  """A GenomicsReferencesGetRequest object.

  Fields:
    referenceId: The ID of the reference.
  """

  referenceId = messages.StringField(1, required=True)


class GenomicsReferencesetsGetRequest(messages.Message):
  """A GenomicsReferencesetsGetRequest object.

  Fields:
    referenceSetId: The ID of the reference set.
  """

  referenceSetId = messages.StringField(1, required=True)


class GenomicsVariantsDeleteRequest(messages.Message):
  """A GenomicsVariantsDeleteRequest object.

  Fields:
    variantId: The ID of the variant to be deleted.
  """

  variantId = messages.StringField(1, required=True)


class GenomicsVariantsDeleteResponse(messages.Message):
  """An empty GenomicsVariantsDelete response."""


class GenomicsVariantsGetRequest(messages.Message):
  """A GenomicsVariantsGetRequest object.

  Fields:
    variantId: The ID of the variant.
  """

  variantId = messages.StringField(1, required=True)


class GenomicsVariantsUpdateRequest(messages.Message):
  """A GenomicsVariantsUpdateRequest object.

  Fields:
    variant: A Variant resource to be passed as the request body.
    variantId: The ID of the variant to be updated.
  """

  variant = messages.MessageField('Variant', 1)
  variantId = messages.StringField(2, required=True)


class GenomicsVariantsetsDeleteRequest(messages.Message):
  """A GenomicsVariantsetsDeleteRequest object.

  Fields:
    variantSetId: The ID of the variant set to be deleted.
  """

  variantSetId = messages.StringField(1, required=True)


class GenomicsVariantsetsDeleteResponse(messages.Message):
  """An empty GenomicsVariantsetsDelete response."""


class GenomicsVariantsetsGetRequest(messages.Message):
  """A GenomicsVariantsetsGetRequest object.

  Fields:
    variantSetId: Required. The ID of the variant set.
  """

  variantSetId = messages.StringField(1, required=True)


class GenomicsVariantsetsMergeVariantsRequest(messages.Message):
  """A GenomicsVariantsetsMergeVariantsRequest object.

  Fields:
    mergeVariantsRequest: A MergeVariantsRequest resource to be passed as the
      request body.
    variantSetId: The destination variant set.
  """

  mergeVariantsRequest = messages.MessageField('MergeVariantsRequest', 1)
  variantSetId = messages.StringField(2, required=True)


class GenomicsVariantsetsMergeVariantsResponse(messages.Message):
  """An empty GenomicsVariantsetsMergeVariants response."""


class GenomicsVariantsetsPatchRequest(messages.Message):
  """A GenomicsVariantsetsPatchRequest object.

  Fields:
    variantSet: A VariantSet resource to be passed as the request body.
    variantSetId: The ID of the variant to be updated.
  """

  variantSet = messages.MessageField('VariantSet', 1)
  variantSetId = messages.StringField(2, required=True)


class GenomicsVariantsetsUpdateRequest(messages.Message):
  """A GenomicsVariantsetsUpdateRequest object.

  Fields:
    variantSet: A VariantSet resource to be passed as the request body.
    variantSetId: The ID of the variant to be updated.
  """

  variantSet = messages.MessageField('VariantSet', 1)
  variantSetId = messages.StringField(2, required=True)


class ImportReadGroupSetsRequest(messages.Message):
  """The ReadGroupSet import request.

  Fields:
    datasetId: Required. The ID of the dataset these read group sets will
      belong to. The caller must have WRITE permissions to this dataset.
    referenceSetId: The reference set to which the imported read group sets
      are aligned to, if any. The reference names of this reference set must
      be a superset of those found in the imported file headers. If no
      reference set id is provided, a best effort is made to associate with a
      matching reference set.
    sourceUris: A list of URIs pointing at BAM files in Google Cloud Storage.
  """

  datasetId = messages.StringField(1)
  referenceSetId = messages.StringField(2)
  sourceUris = messages.StringField(3, repeated=True)


class ImportReadGroupSetsResponse(messages.Message):
  """The ReadGroupSet import response.

  Fields:
    jobId: A job ID that can be used to get status information.
  """

  jobId = messages.StringField(1)


class ImportVariantsRequest(messages.Message):
  """The variant data import request.

  Enums:
    FormatValueValuesEnum: The format of the variant data being imported.

  Fields:
    format: The format of the variant data being imported.
    sourceUris: A list of URIs pointing at VCF files in Google Cloud Storage.
      See the VCF Specification for more details on the input format.
    variantSetId: Required. The variant set to which variant data should be
      imported.
  """

  class FormatValueValuesEnum(messages.Enum):
    """The format of the variant data being imported.

    Values:
      COMPLETE_GENOMICS: <no description>
      VCF: <no description>
    """
    COMPLETE_GENOMICS = 0
    VCF = 1

  format = messages.EnumField('FormatValueValuesEnum', 1)
  sourceUris = messages.StringField(2, repeated=True)
  variantSetId = messages.StringField(3)


class ImportVariantsResponse(messages.Message):
  """The variant data import response.

  Fields:
    jobId: A job ID that can be used to get status information.
  """

  jobId = messages.StringField(1)


class Job(messages.Message):
  """A Job represents an ongoing process that can be monitored for status
  information.

  Enums:
    StatusValueValuesEnum: The status of this job.

  Fields:
    created: The date this job was created, in milliseconds from the epoch.
    detailedStatus: A more detailed description of this job's current status.
    errors: Any errors that occurred during processing.
    id: The job ID.
    importedIds: If this Job represents an import, this field will contain the
      IDs of the objects that were successfully imported.
    projectNumber: The Google Developers Console project number to which this
      job belongs.
    request: A summarized representation of the original service request.
    status: The status of this job.
    warnings: Any warnings that occurred during processing.
  """

  class StatusValueValuesEnum(messages.Enum):
    """The status of this job.

    Values:
      CANCELED: <no description>
      FAILURE: <no description>
      NEW: <no description>
      PENDING: <no description>
      RUNNING: <no description>
      SUCCESS: <no description>
      UNKNOWN_STATUS: <no description>
    """
    CANCELED = 0
    FAILURE = 1
    NEW = 2
    PENDING = 3
    RUNNING = 4
    SUCCESS = 5
    UNKNOWN_STATUS = 6

  created = messages.IntegerField(1)
  detailedStatus = messages.StringField(2)
  errors = messages.StringField(3, repeated=True)
  id = messages.StringField(4)
  importedIds = messages.StringField(5, repeated=True)
  projectNumber = messages.IntegerField(6)
  request = messages.MessageField('JobRequest', 7)
  status = messages.EnumField('StatusValueValuesEnum', 8)
  warnings = messages.StringField(9, repeated=True)


class JobRequest(messages.Message):
  """A summary representation of the service request that spawned the job.

  Enums:
    TypeValueValuesEnum: The original request type.

  Fields:
    destination: The data destination of the request, for example, a Google
      BigQuery Table or Dataset ID.
    source: The data source of the request, for example, a Google Cloud
      Storage object path or Readset ID.
    type: The original request type.
  """

  class TypeValueValuesEnum(messages.Enum):
    """The original request type.

    Values:
      EXPERIMENTAL_CREATE_JOB: <no description>
      EXPORT_READSETS: <no description>
      EXPORT_VARIANTS: <no description>
      IMPORT_READSETS: <no description>
      IMPORT_VARIANTS: <no description>
      UNKNOWN_TYPE: <no description>
    """
    EXPERIMENTAL_CREATE_JOB = 0
    EXPORT_READSETS = 1
    EXPORT_VARIANTS = 2
    IMPORT_READSETS = 3
    IMPORT_VARIANTS = 4
    UNKNOWN_TYPE = 5

  destination = messages.StringField(1, repeated=True)
  source = messages.StringField(2, repeated=True)
  type = messages.EnumField('TypeValueValuesEnum', 3)


class LinearAlignment(messages.Message):
  """A linear alignment can be represented by one CIGAR string. Describes the
  mapped position and local alignment of the read to the reference.

  Fields:
    cigar: Represents the local alignment of this sequence (alignment matches,
      indels, etc) against the reference.
    mappingQuality: The mapping quality of this alignment. Represents how
      likely the read maps to this position as opposed to other locations.
    position: The position of this alignment.
  """

  cigar = messages.MessageField('CigarUnit', 1, repeated=True)
  mappingQuality = messages.IntegerField(2, variant=messages.Variant.INT32)
  position = messages.MessageField('Position', 3)


class ListBasesResponse(messages.Message):
  """A ListBasesResponse object.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    offset: The offset position (0-based) of the given sequence from the start
      of this Reference. This value will differ for each page in a paginated
      request.
    sequence: A substring of the bases that make up this reference.
  """

  nextPageToken = messages.StringField(1)
  offset = messages.IntegerField(2, variant=messages.Variant.UINT64)
  sequence = messages.StringField(3)


class ListCoverageBucketsResponse(messages.Message):
  """A ListCoverageBucketsResponse object.

  Fields:
    bucketWidth: The length of each coverage bucket in base pairs. Note that
      buckets at the end of a reference sequence may be shorter. This value is
      omitted if the bucket width is infinity (the default behaviour, with no
      range or targetBucketWidth).
    coverageBuckets: The coverage buckets. The list of buckets is sparse; a
      bucket with 0 overlapping reads is not returned. A bucket never crosses
      more than one reference sequence. Each bucket has width bucketWidth,
      unless its end is the end of the reference sequence.
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
  """

  bucketWidth = messages.IntegerField(1, variant=messages.Variant.UINT64)
  coverageBuckets = messages.MessageField('CoverageBucket', 2, repeated=True)
  nextPageToken = messages.StringField(3)


class ListDatasetsResponse(messages.Message):
  """The dataset list response.

  Fields:
    datasets: The list of matching Datasets.
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
  """

  datasets = messages.MessageField('Dataset', 1, repeated=True)
  nextPageToken = messages.StringField(2)


class MergeVariantsRequest(messages.Message):
  """A MergeVariantsRequest object.

  Fields:
    variants: The variants to be merged with existing variants.
  """

  variants = messages.MessageField('Variant', 1, repeated=True)


class Metadata(messages.Message):
  """Metadata describes a single piece of variant call metadata. These data
  include a top level key and either a single value string (value) or a list
  of key-value pairs (info.) Value and info are mutually exclusive.

  Enums:
    TypeValueValuesEnum: The type of data. Possible types include: Integer,
      Float, Flag, Character, and String.

  Messages:
    InfoValue: Remaining structured metadata key-value pairs.

  Fields:
    description: A textual description of this metadata.
    id: User-provided ID field, not enforced by this API. Two or more pieces
      of structured metadata with identical id and key fields are considered
      equivalent.
    info: Remaining structured metadata key-value pairs.
    key: The top-level key.
    number: The number of values that can be included in a field described by
      this metadata.
    type: The type of data. Possible types include: Integer, Float, Flag,
      Character, and String.
    value: The value field for simple metadata
  """

  class TypeValueValuesEnum(messages.Enum):
    """The type of data. Possible types include: Integer, Float, Flag,
    Character, and String.

    Values:
      CHARACTER: <no description>
      FLAG: <no description>
      FLOAT: <no description>
      INTEGER: <no description>
      STRING: <no description>
      UNKNOWN_TYPE: <no description>
    """
    CHARACTER = 0
    FLAG = 1
    FLOAT = 2
    INTEGER = 3
    STRING = 4
    UNKNOWN_TYPE = 5

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """Remaining structured metadata key-value pairs.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  description = messages.StringField(1)
  id = messages.StringField(2)
  info = messages.MessageField('InfoValue', 3)
  key = messages.StringField(4)
  number = messages.StringField(5)
  type = messages.EnumField('TypeValueValuesEnum', 6)
  value = messages.StringField(7)


class Position(messages.Message):
  """An abstraction for referring to a genomic position, in relation to some
  already known reference. For now, represents a genomic position as a
  reference name, a base number on that reference (0-based), and a flag to say
  if it's the forward or reverse strand that we're talking about.

  Fields:
    position: The 0-based offset from the start of the forward strand for that
      reference.
    referenceName: The name of the reference (or, more technically, the
      scaffold) in whatever reference set is being used.
    reverseStrand: A flag to indicate if we are on the forward strand (false)
      or reverse strand (true).
  """

  position = messages.IntegerField(1, variant=messages.Variant.UINT64)
  referenceName = messages.StringField(2)
  reverseStrand = messages.BooleanField(3)


class Range(messages.Message):
  """A 0-based half-open genomic coordinate range over a reference sequence.

  Fields:
    end: The end position of the range on the reference, 0-based exclusive. If
      specified, referenceName must also be specified.
    referenceName: The reference sequence name, for example "chr1", "1", or
      "chrX".
    start: The start position of the range on the reference, 0-based
      inclusive. If specified, referenceName must also be specified.
  """

  end = messages.IntegerField(1, variant=messages.Variant.UINT64)
  referenceName = messages.StringField(2)
  start = messages.IntegerField(3, variant=messages.Variant.UINT64)


class ReadAlignment(messages.Message):
  """Each read alignment describes a linear alignment with additional
  information about the fragment and the read. A read alignment object is
  equivalent to a line in a SAM file.

  Messages:
    InfoValue: A map of additional read alignment information.

  Fields:
    alignedQuality: The quality of the read sequence contained in this
      alignment record. alignedSequence and alignedQuality may be shorter than
      the full read sequence and quality. This will occur if the alignment is
      part of a chimeric alignment, or if the read was trimmed. When this
      occurs, the CIGAR for this read will begin/end with a hard clip operator
      that will indicate the length of the excised sequence.
    alignedSequence: The bases of the read sequence contained in this
      alignment record. alignedSequence and alignedQuality may be shorter than
      the full read sequence and quality. This will occur if the alignment is
      part of a chimeric alignment, or if the read was trimmed. When this
      occurs, the CIGAR for this read will begin/end with a hard clip operator
      that will indicate the length of the excised sequence.
    alignment: The linear alignment for this alignment record. This field will
      be null if the read is unmapped.
    duplicateFragment: The fragment is a PCR or optical duplicate (SAM flag
      0x400)
    failedVendorQualityChecks: SAM flag 0x200
    fragmentLength: The observed length of the fragment, equivalent to TLEN in
      SAM.
    fragmentName: The fragment name. Equivalent to QNAME (query template name)
      in SAM.
    id: The unique ID for this read. This is a generated unique ID, not to be
      confused with fragmentName.
    info: A map of additional read alignment information.
    nextMatePosition: The mapping of the primary alignment of the
      (readNumber+1)%numberReads read in the fragment. It replaces mate
      position and mate strand in SAM.
    numberReads: The number of reads in the fragment (extension to SAM flag
      0x1)
    properPlacement: The orientation and the distance between reads from the
      fragment are consistent with the sequencing protocol (extension to SAM
      flag 0x2)
    readGroupId: The ID of the read group this read belongs to. (Every read
      must belong to exactly one read group.)
    readGroupSetId: The ID of the read group set this read belongs to. (Every
      read must belong to exactly one read group set.)
    readNumber: The read number in sequencing. 0-based and less than
      numberReads. This field replaces SAM flag 0x40 and 0x80.
    secondaryAlignment: Whether this alignment is secondary. Equivalent to SAM
      flag 0x100. A secondary alignment represents an alternative to the
      primary alignment for this read. Aligners may return secondary
      alignments if a read can map ambiguously to multiple coordinates in the
      genome. By convention, each read has one and only one alignment where
      both secondaryAlignment and supplementaryAlignment are false.
    supplementaryAlignment: Whether this alignment is supplementary.
      Equivalent to SAM flag 0x800. Supplementary alignments are used in the
      representation of a chimeric alignment. In a chimeric alignment, a read
      is split into multiple linear alignments that map to different reference
      contigs. The first linear alignment in the read will be designated as
      the representative alignment; the remaining linear alignments will be
      designated as supplementary alignments. These alignments may have
      different mapping quality scores. In each linear alignment in a chimeric
      alignment, the read will be hard clipped. The alignedSequence and
      alignedQuality fields in the alignment record will only represent the
      bases for its respective linear alignment.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """A map of additional read alignment information.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  alignedQuality = messages.IntegerField(1, repeated=True, variant=messages.Variant.INT32)
  alignedSequence = messages.StringField(2)
  alignment = messages.MessageField('LinearAlignment', 3)
  duplicateFragment = messages.BooleanField(4)
  failedVendorQualityChecks = messages.BooleanField(5)
  fragmentLength = messages.IntegerField(6, variant=messages.Variant.INT32)
  fragmentName = messages.StringField(7)
  id = messages.StringField(8)
  info = messages.MessageField('InfoValue', 9)
  nextMatePosition = messages.MessageField('Position', 10)
  numberReads = messages.IntegerField(11, variant=messages.Variant.INT32)
  properPlacement = messages.BooleanField(12)
  readGroupId = messages.StringField(13)
  readGroupSetId = messages.StringField(14)
  readNumber = messages.IntegerField(15, variant=messages.Variant.INT32)
  secondaryAlignment = messages.BooleanField(16)
  supplementaryAlignment = messages.BooleanField(17)


class ReadGroup(messages.Message):
  """A ReadGroup is all the data that's processed the same way by the
  sequencer.

  Messages:
    InfoValue: A map of additional read group information.

  Fields:
    datasetId: The ID of the dataset this read group belongs to.
    description: A free-form text description of this read group.
    experiment: The experiment used to generate this read group.
    id: The generated unique read group ID. Note: This is different than the
      @RG ID field in the SAM spec. For that value, see the name field.
    info: A map of additional read group information.
    name: The read group name. This corresponds to the @RG ID field in the SAM
      spec.
    predictedInsertSize: The predicted insert size of this read group. The
      insert size is the length the sequenced DNA fragment from end-to-end,
      not including the adapters.
    programs: The programs used to generate this read group. Programs are
      always identical for all read groups within a read group set. For this
      reason, only the first read group in a returned set will have this field
      populated.
    sampleId: The sample this read group's data was generated from. Note: This
      is not an actual ID within this repository, but rather an identifier for
      a sample which may be meaningful to some external system.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """A map of additional read group information.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  datasetId = messages.StringField(1)
  description = messages.StringField(2)
  experiment = messages.MessageField('ReadGroupExperiment', 3)
  id = messages.StringField(4)
  info = messages.MessageField('InfoValue', 5)
  name = messages.StringField(6)
  predictedInsertSize = messages.IntegerField(7, variant=messages.Variant.INT32)
  programs = messages.MessageField('ReadGroupProgram', 8, repeated=True)
  sampleId = messages.StringField(9)


class ReadGroupExperiment(messages.Message):
  """A ReadGroupExperiment object.

  Fields:
    instrumentModel: The instrument model used as part of this experiment.
      This maps to sequencing technology in BAM.
    libraryId: The library used as part of this experiment. Note: This is not
      an actual ID within this repository, but rather an identifier for a
      library which may be meaningful to some external system.
    platformUnit: The platform unit used as part of this experiment e.g.
      flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to
      the
    sequencingCenter: The sequencing center used as part of this experiment.
  """

  instrumentModel = messages.StringField(1)
  libraryId = messages.StringField(2)
  platformUnit = messages.StringField(3)
  sequencingCenter = messages.StringField(4)


class ReadGroupProgram(messages.Message):
  """A ReadGroupProgram object.

  Fields:
    commandLine: The command line used to run this program.
    id: The user specified locally unique ID of the program. Used along with
      prevProgramId to define an ordering between programs.
    name: The name of the program.
    prevProgramId: The ID of the program run before this one.
    version: The version of the program run.
  """

  commandLine = messages.StringField(1)
  id = messages.StringField(2)
  name = messages.StringField(3)
  prevProgramId = messages.StringField(4)
  version = messages.StringField(5)


class ReadGroupSet(messages.Message):
  """A ReadGroupSet is a logical collection of ReadGroups. A ReadGroupSet
  typically models reads corresponding to one sample, sequenced one way, and
  aligned one way.

  Fields:
    datasetId: The dataset ID.
    filename: The filename of the original source file for this read group
      set, if any.
    id: The read group set ID.
    name: The read group set name. By default this will be initialized to the
      sample name of the sequenced data contained in this set.
    readGroups: The read groups in this set. There are typically 1-10 read
      groups in a read group set.
    referenceSetId: The reference set the reads in this read group set are
      aligned to.
  """

  datasetId = messages.StringField(1)
  filename = messages.StringField(2)
  id = messages.StringField(3)
  name = messages.StringField(4)
  readGroups = messages.MessageField('ReadGroup', 5, repeated=True)
  referenceSetId = messages.StringField(6)


class Reference(messages.Message):
  """A reference is a canonical assembled contig, intended to act as a
  reference coordinate space for other genomic annotations. A single reference
  might represent the human chromosome 1, for instance. A reference belongs to
  one or more reference sets.  Implements GAReference
  (https://github.com/ga4gh/schemas).

  Fields:
    id: The Google generated immutable ID of the reference.
    length: The length of this reference's sequence.
    md5checksum: MD5 of the upper-case sequence excluding all whitespace
      characters (this is equivalent to SQ:M5 in SAM). This value is
      represented in lower case hexadecimal format.
    name: The name of this reference, for example 22.
    ncbiTaxonId: ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g.
      9606->human) if not specified by the containing reference set.
    sourceAccessions: All known corresponding accession IDs in INSDC
      (GenBank/ENA/DDBJ) ideally with a version number, for example
      GCF_000001405.26.
    sourceURI: The URI from which the sequence was obtained. Specifies a FASTA
      format file/string with one name, sequence pair.
  """

  id = messages.StringField(1)
  length = messages.IntegerField(2, variant=messages.Variant.UINT64)
  md5checksum = messages.StringField(3)
  name = messages.StringField(4)
  ncbiTaxonId = messages.IntegerField(5, variant=messages.Variant.INT32)
  sourceAccessions = messages.StringField(6, repeated=True)
  sourceURI = messages.StringField(7)


class ReferenceBound(messages.Message):
  """ReferenceBound records an upper bound for the starting coordinate of
  variants in a particular reference.

  Fields:
    referenceName: The reference the bound is associate with.
    upperBound: An upper bound (inclusive) on the starting coordinate of any
      variant in the reference sequence.
  """

  referenceName = messages.StringField(1)
  upperBound = messages.IntegerField(2)


class ReferenceSet(messages.Message):
  """A reference set is a set of references which typically comprise a
  reference assembly, such as GRCh38. A reference set defines a common
  coordinate space for comparing reference-aligned experimental data. A
  reference set contains 1 or more references.  Implements GAReferenceSet
  (https://github.com/ga4gh/schemas).

  Fields:
    assemblyId: Public id of this reference set, such as GRCh37.
    description: Optional free text description of this reference set.
    id: The Google generated immutable ID of the reference set.
    md5checksum: Order-independent MD5 checksum which identifies this
      reference set. The checksum is computed by sorting all lower case
      hexidecimal string reference.md5checksum (for all reference in this set)
      in ascending lexicographic order, concatenating, and taking the MD5 of
      that value. The resulting value is represented in lower case hexadecimal
      format.
    ncbiTaxonId: ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g.
      9606->human) indicating the species which this assembly is intended to
      model. Note that contained references may specify a different
      ncbiTaxonId, as assemblies may contain reference sequences which do not
      belong to the modeled species, e.g. EBV in a human reference genome.
    referenceIds: The IDs of the reference objects that are part of this set.
      Reference.md5checksum must be unique within this set.
    sourceAccessions: All known corresponding accession IDs in INSDC
      (GenBank/ENA/DDBJ) ideally with a version number, for example
      NC_000001.11.
    sourceURI: The URI from which the references were obtained.
  """

  assemblyId = messages.StringField(1)
  description = messages.StringField(2)
  id = messages.StringField(3)
  md5checksum = messages.StringField(4)
  ncbiTaxonId = messages.IntegerField(5, variant=messages.Variant.INT32)
  referenceIds = messages.StringField(6, repeated=True)
  sourceAccessions = messages.StringField(7, repeated=True)
  sourceURI = messages.StringField(8)


class SearchCallSetsRequest(messages.Message):
  """The call set search request.

  Fields:
    name: Only return call sets for which a substring of the name matches this
      string.
    pageSize: The maximum number of call sets to return.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    variantSetIds: Restrict the query to call sets within the given variant
      sets. At least one ID must be provided.
  """

  name = messages.StringField(1)
  pageSize = messages.IntegerField(2, variant=messages.Variant.INT32)
  pageToken = messages.StringField(3)
  variantSetIds = messages.StringField(4, repeated=True)


class SearchCallSetsResponse(messages.Message):
  """The call set search response.

  Fields:
    callSets: The list of matching call sets.
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
  """

  callSets = messages.MessageField('CallSet', 1, repeated=True)
  nextPageToken = messages.StringField(2)


class SearchJobsRequest(messages.Message):
  """The jobs search request.

  Enums:
    StatusValueListEntryValuesEnum:

  Fields:
    createdAfter: If specified, only jobs created on or after this date, given
      in milliseconds since Unix epoch, will be returned.
    createdBefore: If specified, only jobs created prior to this date, given
      in milliseconds since Unix epoch, will be returned.
    pageSize: Specifies the number of results to return in a single page.
      Defaults to 128. The maximum value is 256.
    pageToken: The continuation token which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of the nextPageToken from the previous response.
    projectNumber: Required. Only return jobs which belong to this Google
      Developers
    status: Only return jobs which have a matching status.
  """

  class StatusValueListEntryValuesEnum(messages.Enum):
    """StatusValueListEntryValuesEnum enum type.

    Values:
      CANCELED: <no description>
      FAILURE: <no description>
      NEW: <no description>
      PENDING: <no description>
      RUNNING: <no description>
      SUCCESS: <no description>
      UNKNOWN_STATUS: <no description>
    """
    CANCELED = 0
    FAILURE = 1
    NEW = 2
    PENDING = 3
    RUNNING = 4
    SUCCESS = 5
    UNKNOWN_STATUS = 6

  createdAfter = messages.IntegerField(1)
  createdBefore = messages.IntegerField(2)
  pageSize = messages.IntegerField(3, variant=messages.Variant.INT32)
  pageToken = messages.StringField(4)
  projectNumber = messages.IntegerField(5)
  status = messages.EnumField('StatusValueListEntryValuesEnum', 6, repeated=True)


class SearchJobsResponse(messages.Message):
  """The job search response.

  Fields:
    jobs: The list of jobs results, ordered newest to oldest.
    nextPageToken: The continuation token which is used to page through large
      result sets. Provide this value is a subsequent request to return the
      next page of results. This field will be empty if there are no more
      results.
  """

  jobs = messages.MessageField('Job', 1, repeated=True)
  nextPageToken = messages.StringField(2)


class SearchReadGroupSetsRequest(messages.Message):
  """The ReadGroupSet search request.

  Fields:
    datasetIds: Restricts this query to read group sets within the given
      datasets. At least one ID must be provided.
    name: Only return read group sets for which a substring of the name
      matches this string.
    pageSize: Specifies number of results to return in a single page. If
      unspecified, it will default to 128. The maximum value is 1024.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
  """

  datasetIds = messages.StringField(1, repeated=True)
  name = messages.StringField(2)
  pageSize = messages.IntegerField(3, variant=messages.Variant.INT32)
  pageToken = messages.StringField(4)


class SearchReadGroupSetsResponse(messages.Message):
  """The ReadGroupSet search response.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    readGroupSets: The list of matching read group sets.
  """

  nextPageToken = messages.StringField(1)
  readGroupSets = messages.MessageField('ReadGroupSet', 2, repeated=True)


class SearchReadsRequest(messages.Message):
  """The read search request.

  Fields:
    end: The end position of the range on the reference, 0-based exclusive. If
      specified, referenceName must also be specified.
    pageSize: Specifies number of results to return in a single page. If
      unspecified, it will default to 256. The maximum value is 2048.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    readGroupIds: The IDs of the read groups within which to search for reads.
      All specified read groups must belong to the same read group sets. Must
      specify one of readGroupSetIds or readGroupIds.
    readGroupSetIds: The IDs of the read groups sets within which to search
      for reads. All specified read group sets must be aligned against a
      common set of reference sequences; this defines the genomic coordinates
      for the query. Must specify one of readGroupSetIds or readGroupIds.
    referenceName: The reference sequence name, for example "chr1", "1", or
      "chrX".
    start: The start position of the range on the reference, 0-based
      inclusive. If specified, referenceName must also be specified.
  """

  end = messages.IntegerField(1, variant=messages.Variant.UINT64)
  pageSize = messages.IntegerField(2, variant=messages.Variant.INT32)
  pageToken = messages.StringField(3)
  readGroupIds = messages.StringField(4, repeated=True)
  readGroupSetIds = messages.StringField(5, repeated=True)
  referenceName = messages.StringField(6)
  start = messages.IntegerField(7, variant=messages.Variant.UINT64)


class SearchReadsResponse(messages.Message):
  """The read search response.

  Fields:
    alignments: The list of matching alignments sorted by mapped genomic
      coordinate, if any, ascending in position within the same reference.
      Unmapped reads, which have no position, are returned last and are
      further sorted in ascending lexicographic order by fragment name.
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
  """

  alignments = messages.MessageField('ReadAlignment', 1, repeated=True)
  nextPageToken = messages.StringField(2)


class SearchReferenceSetsRequest(messages.Message):
  """A SearchReferenceSetsRequest object.

  Fields:
    accessions: If present, return references for which the accession matches
      any of these strings. Best to give a version number, for example
      GCF_000001405.26. If only the main accession number is given then all
      records with that main accession will be returned, whichever version.
      Note that different versions will have different sequences.
    md5checksums: If present, return references for which the md5checksum
      matches. See ReferenceSet.md5checksum for details.
    pageSize: Specifies the maximum number of results to return in a single
      page.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
  """

  accessions = messages.StringField(1, repeated=True)
  md5checksums = messages.StringField(2, repeated=True)
  pageSize = messages.IntegerField(3, variant=messages.Variant.INT32)
  pageToken = messages.StringField(4)


class SearchReferenceSetsResponse(messages.Message):
  """A SearchReferenceSetsResponse object.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    referenceSets: The matching references sets.
  """

  nextPageToken = messages.StringField(1)
  referenceSets = messages.MessageField('ReferenceSet', 2, repeated=True)


class SearchReferencesRequest(messages.Message):
  """SearchReferencesRequest message type.

  Fields:
    accessions: If present, return references for which the accession matches
      this string. Best to give a version number, for example
      GCF_000001405.26. If only the main accession number is given then all
      records with that main accession will be returned, whichever version.
      Note that different versions will have different sequences.
    md5checksums: If present, return references for which the md5checksum
      matches. See Reference.md5checksum for construction details.
    pageSize: Specifies the maximum number of results to return in a single
      page.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    referenceSetId: If present, return only references which belong to this
      reference set.
  """

  accessions = messages.StringField(1, repeated=True)
  md5checksums = messages.StringField(2, repeated=True)
  pageSize = messages.IntegerField(3, variant=messages.Variant.INT32)
  pageToken = messages.StringField(4)
  referenceSetId = messages.StringField(5)


class SearchReferencesResponse(messages.Message):
  """A SearchReferencesResponse object.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    references: The matching references.
  """

  nextPageToken = messages.StringField(1)
  references = messages.MessageField('Reference', 2, repeated=True)


class SearchVariantSetsRequest(messages.Message):
  """The search variant sets request.

  Fields:
    datasetIds: Exactly one dataset ID must be provided here. Only variant
      sets which belong to this dataset will be returned.
    pageSize: The maximum number of variant sets to return in a request.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
  """

  datasetIds = messages.StringField(1, repeated=True)
  pageSize = messages.IntegerField(2, variant=messages.Variant.INT32)
  pageToken = messages.StringField(3)


class SearchVariantSetsResponse(messages.Message):
  """The search variant sets response.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    variantSets: The variant sets belonging to the requested dataset.
  """

  nextPageToken = messages.StringField(1)
  variantSets = messages.MessageField('VariantSet', 2, repeated=True)


class SearchVariantsRequest(messages.Message):
  """The variant search request.

  Fields:
    callSetIds: Only return variant calls which belong to call sets with these
      ids. Leaving this blank returns all variant calls. If a variant has no
      calls belonging to any of these call sets, it won't be returned at all.
      Currently, variants with no calls from any call set will never be
      returned.
    end: Required. The end of the window (0-based, exclusive) for which
      overlapping variants should be returned.
    maxCalls: The maximum number of calls to return. However, at least one
      variant will always be returned, even if it has more calls than this
      limit.
    pageSize: The maximum number of variants to return.
    pageToken: The continuation token, which is used to page through large
      result sets. To get the next page of results, set this parameter to the
      value of nextPageToken from the previous response.
    referenceName: Required. Only return variants in this reference sequence.
    start: Required. The beginning of the window (0-based, inclusive) for
      which overlapping variants should be returned.
    variantName: Only return variants which have exactly this name.
    variantSetIds: Exactly one variant set ID must be provided. Only variants
      from this variant set will be returned.
  """

  callSetIds = messages.StringField(1, repeated=True)
  end = messages.IntegerField(2)
  maxCalls = messages.IntegerField(3, variant=messages.Variant.INT32)
  pageSize = messages.IntegerField(4, variant=messages.Variant.INT32)
  pageToken = messages.StringField(5)
  referenceName = messages.StringField(6)
  start = messages.IntegerField(7)
  variantName = messages.StringField(8)
  variantSetIds = messages.StringField(9, repeated=True)


class SearchVariantsResponse(messages.Message):
  """The variant search response.

  Fields:
    nextPageToken: The continuation token, which is used to page through large
      result sets. Provide this value in a subsequent request to return the
      next page of results. This field will be empty if there aren't any
      additional results.
    variants: The list of matching Variants.
  """

  nextPageToken = messages.StringField(1)
  variants = messages.MessageField('Variant', 2, repeated=True)


class StandardQueryParameters(messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    AltValueValuesEnum: Data format for the response.

  Fields:
    alt: Data format for the response.
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters. Overrides userIp if both are provided.
    trace: A tracing token of the form "token:<tokenid>" or "email:<ldap>" to
      include in api requests.
    userIp: IP address of the site where the request originates. Use this if
      you want to enforce per-user limits.
  """

  class AltValueValuesEnum(messages.Enum):
    """Data format for the response.

    Values:
      json: Responses with Content-Type of application/json
    """
    json = 0

  alt = messages.EnumField('AltValueValuesEnum', 1, default=u'json')
  fields = messages.StringField(2)
  key = messages.StringField(3)
  oauth_token = messages.StringField(4)
  prettyPrint = messages.BooleanField(5, default=True)
  quotaUser = messages.StringField(6)
  trace = messages.StringField(7)
  userIp = messages.StringField(8)


class Variant(messages.Message):
  """A Variant represents a change in DNA sequence relative to some reference.
  For example, a Variant could represent a SNP or an insertion. Variants
  belong to a variant set.

  Messages:
    InfoValue: A map of additional variant information.

  Fields:
    alternateBases: The bases that appear instead of the reference bases.
    calls: The variant calls for this particular variant. Each one represents
      the determination of genotype with respect to this variant.
    created: The date this variant was created, in milliseconds from the
      epoch.
    end: The end position (0-based) of this variant. This corresponds to the
      first base after the last base in the reference allele. So, the length
      of the reference allele is (end - start). This is useful for variants
      that don't explicitly give alternate bases, for example large deletions.
    filter: A list of filters (normally quality filters) this variant has
      failed. PASS indicates this variant has passed all filters.
    id: The Google generated ID of the variant, immutable.
    info: A map of additional variant information.
    names: Names for the variant, for example a RefSNP ID.
    quality: A measure of how likely this variant is to be real. A higher
      value is better.
    referenceBases: The reference bases for this variant. They start at the
      given position.
    referenceName: The reference on which this variant occurs. (such as chr20
      or X)
    start: The position at which this variant occurs (0-based). This
      corresponds to the first base of the string of reference bases.
    variantSetId: The ID of the variant set this variant belongs to.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class InfoValue(messages.Message):
    """A map of additional variant information.

    Messages:
      AdditionalProperty: An additional property for a InfoValue object.

    Fields:
      additionalProperties: A string which maps to an array of values.
    """

    class AdditionalProperty(messages.Message):
      """An additional property for a InfoValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = messages.StringField(1)
      value = messages.StringField(2, repeated=True)

    additionalProperties = messages.MessageField('AdditionalProperty', 1, repeated=True)

  alternateBases = messages.StringField(1, repeated=True)
  calls = messages.MessageField('Call', 2, repeated=True)
  created = messages.IntegerField(3)
  end = messages.IntegerField(4)
  filter = messages.StringField(5, repeated=True)
  id = messages.StringField(6)
  info = messages.MessageField('InfoValue', 7)
  names = messages.StringField(8, repeated=True)
  quality = messages.FloatField(9)
  referenceBases = messages.StringField(10)
  referenceName = messages.StringField(11)
  start = messages.IntegerField(12)
  variantSetId = messages.StringField(13)


class VariantSet(messages.Message):
  """A VariantSet represents a collection of Variants and their summary
  statistics.

  Fields:
    datasetId: The dataset to which this variant set belongs. Immutable.
    id: The Google-generated ID of the variant set. Immutable.
    metadata: The metadata associated with this variant set.
    referenceBounds: A list of all references used by the variants in a
      variant set with associated coordinate upper bounds for each one.
  """

  datasetId = messages.StringField(1)
  id = messages.StringField(2)
  metadata = messages.MessageField('Metadata', 3, repeated=True)
  referenceBounds = messages.MessageField('ReferenceBound', 4, repeated=True)


